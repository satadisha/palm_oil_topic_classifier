{"cells":[{"cell_type":"code","execution_count":17,"metadata":{"id":"SzdiX34f9Y4H","executionInfo":{"status":"ok","timestamp":1754492656064,"user_tz":300,"elapsed":4,"user":{"displayName":"Uriel Fuentes","userId":"03460244563483632293"}}},"outputs":[],"source":["import random\n","random_seed = 10\n","random.seed(random_seed)"]},{"cell_type":"code","execution_count":18,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":648,"status":"ok","timestamp":1754492656714,"user":{"displayName":"Uriel Fuentes","userId":"03460244563483632293"},"user_tz":300},"id":"EWV5JAhES9zs","outputId":"e19da7c2-cad0-41a6-9298-0af62d1f0a54"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/gdrive; to attempt to forcibly remount, call drive.mount(\"/content/gdrive\", force_remount=True).\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/gdrive')\n","\n","import pandas as pd"]},{"cell_type":"markdown","metadata":{"id":"JYaQPnBLVac5"},"source":["# Test, Train, Val Data"]},{"cell_type":"code","execution_count":19,"metadata":{"id":"3T37a5isTnGe","colab":{"base_uri":"https://localhost:8080/","height":556},"executionInfo":{"status":"ok","timestamp":1754492658354,"user_tz":300,"elapsed":1642,"user":{"displayName":"Uriel Fuentes","userId":"03460244563483632293"}},"outputId":"77819f1d-1ab0-4332-f457-8894e42aaa80"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Document_Num  Dominant_Topic  Topic_%_Contrib  \\\n","0             0               4             0.99   \n","1             1               4             0.97   \n","2             2               0             0.93   \n","3             3               2             0.77   \n","4             4               5             0.81   \n","\n","                                      Topic_Keywords  \\\n","0  workers, labour, union, employment, casual, da...   \n","1  workers, labour, union, employment, casual, da...   \n","2  land, communities, rights, local, allegations,...   \n","3  eof, forest, mill, plantation, illegal, gar, p...   \n","4  hcv, land, area, forest, npp, new, local, rspo...   \n","\n","                                                Text  Is_Outlier  \\\n","0  transferred different department purportedly p...       False   \n","1  unjustifiably dismissed workers deceiving resi...       False   \n","2  1 owns operates plantations conflicted contest...       False   \n","3  corporate social responsibility csr program co...       False   \n","4  breached obligations ignoring high conservatio...       False   \n","\n","   Dom_Topics_Num  Topic_0  Topic_1  Topic_2  Topic_3  Topic_4  Topic_5  \\\n","0               1        0        0        0        0        1        0   \n","1               1        0        0        0        0        1        0   \n","2               1        1        0        0        0        0        0   \n","3               1        0        0        1        0        0        0   \n","4               1        0        0        0        0        0        1   \n","\n","   Topic_0_Perc  Topic_1_Perc  Topic_2_Perc  Topic_3_Perc  Topic_4_Perc  \\\n","0          0.01          0.00          0.00          0.00          0.99   \n","1          0.01          0.00          0.01          0.00          0.97   \n","2          0.93          0.00          0.01          0.01          0.01   \n","3          0.07          0.01          0.77          0.03          0.03   \n","4          0.10          0.01          0.04          0.02          0.01   \n","\n","   Topic_5_Perc  \n","0          0.00  \n","1          0.01  \n","2          0.04  \n","3          0.10  \n","4          0.81  "],"text/html":["\n","  <div id=\"df-ec2e61d9-9aaa-4352-83a1-27c98451818b\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Document_Num</th>\n","      <th>Dominant_Topic</th>\n","      <th>Topic_%_Contrib</th>\n","      <th>Topic_Keywords</th>\n","      <th>Text</th>\n","      <th>Is_Outlier</th>\n","      <th>Dom_Topics_Num</th>\n","      <th>Topic_0</th>\n","      <th>Topic_1</th>\n","      <th>Topic_2</th>\n","      <th>Topic_3</th>\n","      <th>Topic_4</th>\n","      <th>Topic_5</th>\n","      <th>Topic_0_Perc</th>\n","      <th>Topic_1_Perc</th>\n","      <th>Topic_2_Perc</th>\n","      <th>Topic_3_Perc</th>\n","      <th>Topic_4_Perc</th>\n","      <th>Topic_5_Perc</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>4</td>\n","      <td>0.99</td>\n","      <td>workers, labour, union, employment, casual, da...</td>\n","      <td>transferred different department purportedly p...</td>\n","      <td>False</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0.01</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0.99</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>4</td>\n","      <td>0.97</td>\n","      <td>workers, labour, union, employment, casual, da...</td>\n","      <td>unjustifiably dismissed workers deceiving resi...</td>\n","      <td>False</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0.01</td>\n","      <td>0.00</td>\n","      <td>0.01</td>\n","      <td>0.00</td>\n","      <td>0.97</td>\n","      <td>0.01</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0.93</td>\n","      <td>land, communities, rights, local, allegations,...</td>\n","      <td>1 owns operates plantations conflicted contest...</td>\n","      <td>False</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0.93</td>\n","      <td>0.00</td>\n","      <td>0.01</td>\n","      <td>0.01</td>\n","      <td>0.01</td>\n","      <td>0.04</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>0.77</td>\n","      <td>eof, forest, mill, plantation, illegal, gar, p...</td>\n","      <td>corporate social responsibility csr program co...</td>\n","      <td>False</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0.07</td>\n","      <td>0.01</td>\n","      <td>0.77</td>\n","      <td>0.03</td>\n","      <td>0.03</td>\n","      <td>0.10</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4</td>\n","      <td>5</td>\n","      <td>0.81</td>\n","      <td>hcv, land, area, forest, npp, new, local, rspo...</td>\n","      <td>breached obligations ignoring high conservatio...</td>\n","      <td>False</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0.10</td>\n","      <td>0.01</td>\n","      <td>0.04</td>\n","      <td>0.02</td>\n","      <td>0.01</td>\n","      <td>0.81</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ec2e61d9-9aaa-4352-83a1-27c98451818b')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-ec2e61d9-9aaa-4352-83a1-27c98451818b button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-ec2e61d9-9aaa-4352-83a1-27c98451818b');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-65ce672d-4e0a-4f16-8f3c-126c80b4de6d\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-65ce672d-4e0a-4f16-8f3c-126c80b4de6d')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-65ce672d-4e0a-4f16-8f3c-126c80b4de6d button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"dominant_topic_df","summary":"{\n  \"name\": \"dominant_topic_df\",\n  \"rows\": 387,\n  \"fields\": [\n    {\n      \"column\": \"Document_Num\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 111,\n        \"min\": 0,\n        \"max\": 386,\n        \"num_unique_values\": 387,\n        \"samples\": [\n          314,\n          152,\n          90\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Dominant_Topic\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 5,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          4,\n          0,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Topic_%_Contrib\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.1982421848423447,\n        \"min\": 0.29,\n        \"max\": 1.0,\n        \"num_unique_values\": 69,\n        \"samples\": [\n          0.64,\n          0.99,\n          0.91\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Topic_Keywords\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"workers, labour, union, employment, casual, daily, rights, working, bpjs, termination\",\n          \"land, communities, rights, local, allegations, principle, village, process, growers, plantation\",\n          \"deforestation, gar, linked, chain, jaya, supply, mighty, earth, rapid, response\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Text\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 368,\n        \"samples\": [\n          \"gar holding used membership rules make two smart ivo mas tunggal members green washed create impression gar committed sustainability membership gar claims aim obtain certification existing operating units 2015 claimed gar holding smart plan become member claims supported evidence held\",\n          \"embezzlement severance payment two retired workers head administration\",\n          \"respondents development allocation plasma plantations accordance agreement mou kelinjau ulu village\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Is_Outlier\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Dom_Topics_Num\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 2,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Topic_0\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Topic_1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Topic_2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Topic_3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Topic_4\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Topic_5\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Topic_0_Perc\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2905790329183177,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 73,\n        \"samples\": [\n          0.04\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Topic_1_Perc\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.30172926118270615,\n        \"min\": 0.0,\n        \"max\": 0.98,\n        \"num_unique_values\": 58,\n        \"samples\": [\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Topic_2_Perc\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.26524824849434314,\n        \"min\": 0.0,\n        \"max\": 0.99,\n        \"num_unique_values\": 63,\n        \"samples\": [\n          0.18\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Topic_3_Perc\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.25103956518861426,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 62,\n        \"samples\": [\n          0.96\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Topic_4_Perc\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2905783878644708,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 50,\n        \"samples\": [\n          0.94\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Topic_5_Perc\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.23017481058299738,\n        \"min\": 0.0,\n        \"max\": 0.97,\n        \"num_unique_values\": 74,\n        \"samples\": [\n          0.81\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":19}],"source":["dominant_topic_df = pd.read_csv('/content/gdrive/MyDrive/Group 3: palm oil topic classifier/Data/Labeled Data/dominant_topic_results.csv')\n","dominant_topic_df.head()"]},{"cell_type":"code","execution_count":20,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":8,"status":"ok","timestamp":1754492658364,"user":{"displayName":"Uriel Fuentes","userId":"03460244563483632293"},"user_tz":300},"id":"35rqkzwFSnzE","outputId":"84de8080-24a7-4ddf-fa9f-c5bf414cb098"},"outputs":[{"output_type":"stream","name":"stdout","text":["Training set size: 309\n","Validation set size: 78\n","\n","Shape of X_train: (309,)\n","Shape of X_val: (78,)\n","Shape of y_train: (309, 7)\n","Shape of y_val: (78, 7)\n"]}],"source":["from sklearn.model_selection import train_test_split\n","\n","# Assuming dominant_topic_df is the DataFrame you want to split\n","# Define the features (X) and the target (y)\n","# Here, we'll use the 'Text' column as the feature\n","X = dominant_topic_df['Text']\n","\n","# And the topic probability columns and Dominant_Topic as the target (y)\n","# Changed to include Topic_0 through Topic_5 instead of the percentage columns\n","topic_columns = [col for col in dominant_topic_df.columns if col.startswith('Topic_') and len(col) == 7 and not col.endswith('_Perc')]\n","y = dominant_topic_df[['Document_Num'] + topic_columns]\n","\n","\n","# Perform the 80/20 split\n","X_train, X_val, y_train, y_val = train_test_split(\n","    X, y,\n","    test_size=0.2,  # 20% for validation\n","    random_state=random_seed # Use the predefined random_seed for reproducibility\n","    # Stratify is not directly applicable to multi-output targets like this,\n","    # so we will remove it.\n",")\n","\n","print(\"Training set size:\", len(X_train))\n","print(\"Validation set size:\", len(X_val))\n","print(\"\\nShape of X_train:\", X_train.shape)\n","print(\"Shape of X_val:\", X_val.shape)\n","print(\"Shape of y_train:\", y_train.shape)\n","print(\"Shape of y_val:\", y_val.shape)"]},{"cell_type":"code","execution_count":21,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":842},"executionInfo":{"elapsed":40,"status":"ok","timestamp":1754492658429,"user":{"displayName":"Uriel Fuentes","userId":"03460244563483632293"},"user_tz":300},"id":"P2TWWjgeS2sZ","outputId":"e6e7f8c2-3c6c-4b57-8bc9-b0c5feebeb35"},"outputs":[{"output_type":"display_data","data":{"text/plain":["214    greenpeace final countdown allegations defores...\n","330    8 december 2022 ran published titled notorious...\n","10     infringed private property firebreak destroyed...\n","76     allegation expansion land approximately 150 ha...\n","199    ran oppuk ilrf published human cost conflict a...\n","Name: Text, dtype: object"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Text</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>214</th>\n","      <td>greenpeace final countdown allegations defores...</td>\n","    </tr>\n","    <tr>\n","      <th>330</th>\n","      <td>8 december 2022 ran published titled notorious...</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>infringed private property firebreak destroyed...</td>\n","    </tr>\n","    <tr>\n","      <th>76</th>\n","      <td>allegation expansion land approximately 150 ha...</td>\n","    </tr>\n","    <tr>\n","      <th>199</th>\n","      <td>ran oppuk ilrf published human cost conflict a...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> object</label>"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["197    various reports hcv clearances violations ioi ...\n","282    mighty earth rrr 29 indications 12 ha deforest...\n","267    rapid response 23 mighty earth indications 42 ...\n","66     summary allegations follows 1 committed discri...\n","331    nov 23rd 2022 gar received grievance customer ...\n","Name: Text, dtype: object"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Text</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>197</th>\n","      <td>various reports hcv clearances violations ioi ...</td>\n","    </tr>\n","    <tr>\n","      <th>282</th>\n","      <td>mighty earth rrr 29 indications 12 ha deforest...</td>\n","    </tr>\n","    <tr>\n","      <th>267</th>\n","      <td>rapid response 23 mighty earth indications 42 ...</td>\n","    </tr>\n","    <tr>\n","      <th>66</th>\n","      <td>summary allegations follows 1 committed discri...</td>\n","    </tr>\n","    <tr>\n","      <th>331</th>\n","      <td>nov 23rd 2022 gar received grievance customer ...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> object</label>"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["     Document_Num  Topic_0  Topic_1  Topic_2  Topic_3  Topic_4  Topic_5\n","214           214        0        1        0        1        0        0\n","330           330        0        0        0        1        0        0\n","10             10        1        0        0        0        0        0\n","76             76        1        0        0        0        0        0\n","199           199        0        0        1        0        0        0"],"text/html":["\n","  <div id=\"df-e6d286fb-8b00-4bd5-803a-7d2ee6748dd2\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Document_Num</th>\n","      <th>Topic_0</th>\n","      <th>Topic_1</th>\n","      <th>Topic_2</th>\n","      <th>Topic_3</th>\n","      <th>Topic_4</th>\n","      <th>Topic_5</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>214</th>\n","      <td>214</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>330</th>\n","      <td>330</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>10</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>76</th>\n","      <td>76</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>199</th>\n","      <td>199</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e6d286fb-8b00-4bd5-803a-7d2ee6748dd2')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-e6d286fb-8b00-4bd5-803a-7d2ee6748dd2 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-e6d286fb-8b00-4bd5-803a-7d2ee6748dd2');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-c2cda8cc-1175-4606-857d-fbe2e89278f8\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c2cda8cc-1175-4606-857d-fbe2e89278f8')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-c2cda8cc-1175-4606-857d-fbe2e89278f8 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"display(y_val\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"Document_Num\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 125,\n        \"min\": 10,\n        \"max\": 330,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          330,\n          199,\n          10\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Topic_0\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Topic_1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Topic_2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Topic_3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Topic_4\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Topic_5\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["     Document_Num  Topic_0  Topic_1  Topic_2  Topic_3  Topic_4  Topic_5\n","197           197        0        0        0        0        0        1\n","282           282        0        1        0        0        0        0\n","267           267        0        1        0        0        0        0\n","66             66        0        0        0        0        1        0\n","331           331        0        0        1        0        0        0"],"text/html":["\n","  <div id=\"df-70d9fd11-ef88-4ff0-b6d4-9e2c11c03341\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Document_Num</th>\n","      <th>Topic_0</th>\n","      <th>Topic_1</th>\n","      <th>Topic_2</th>\n","      <th>Topic_3</th>\n","      <th>Topic_4</th>\n","      <th>Topic_5</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>197</th>\n","      <td>197</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>282</th>\n","      <td>282</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>267</th>\n","      <td>267</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>66</th>\n","      <td>66</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>331</th>\n","      <td>331</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-70d9fd11-ef88-4ff0-b6d4-9e2c11c03341')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-70d9fd11-ef88-4ff0-b6d4-9e2c11c03341 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-70d9fd11-ef88-4ff0-b6d4-9e2c11c03341');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-fff70a7c-2c34-4170-a0f0-9b7aa369d87f\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-fff70a7c-2c34-4170-a0f0-9b7aa369d87f')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-fff70a7c-2c34-4170-a0f0-9b7aa369d87f button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"display(y_val\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"Document_Num\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 102,\n        \"min\": 66,\n        \"max\": 331,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          282,\n          331,\n          267\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Topic_0\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Topic_1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Topic_2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Topic_3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Topic_4\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Topic_5\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}}],"source":["display(X_train.head())\n","display(X_val.head())\n","display(y_train.head())\n","display(y_val.head())"]},{"cell_type":"code","execution_count":22,"metadata":{"id":"RIhwF3ApWaS2","executionInfo":{"status":"ok","timestamp":1754492659225,"user_tz":300,"elapsed":779,"user":{"displayName":"Uriel Fuentes","userId":"03460244563483632293"}}},"outputs":[],"source":["test_df = pd.read_csv('/content/gdrive/MyDrive/Group 3: palm oil topic classifier/Text Classification Models/classified_grievances_multilabel.csv')\n","\n","test_df = test_df[['pk', 'summary', 'Topic_0', 'Topic_1', 'Topic_2', 'Topic_3', 'Topic_4', \"Topic_5\"]]"]},{"cell_type":"code","execution_count":23,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"elapsed":21,"status":"ok","timestamp":1754492659249,"user":{"displayName":"Uriel Fuentes","userId":"03460244563483632293"},"user_tz":300},"id":"60a79602","outputId":"b6e369c1-f8b0-4692-cdd2-d2af4208b8d8"},"outputs":[{"output_type":"display_data","data":{"text/plain":["    pk                                            summary  Topic_0  Topic_1  \\\n","0  431  In July 2020, Cargill received a grievance aga...        0        1   \n","1  432  A grievance was filed against Agropalma regard...        1        0   \n","2  433  This grievance was filed by Friends of the Ear...        1        0   \n","3  434  A grievance was filed against Brasil Bio Fuels...        0        0   \n","4  435  A grievance was filed by Link-Ar Borneo agains...        1        0   \n","\n","   Topic_2  Topic_3  Topic_4  Topic_5  \n","0        0        1        1        0  \n","1        0        0        1        0  \n","2        0        0        0        0  \n","3        0        1        1        0  \n","4        0        0        0        0  "],"text/html":["\n","  <div id=\"df-7063f0cf-59e1-40c3-8555-73af449b13bf\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>pk</th>\n","      <th>summary</th>\n","      <th>Topic_0</th>\n","      <th>Topic_1</th>\n","      <th>Topic_2</th>\n","      <th>Topic_3</th>\n","      <th>Topic_4</th>\n","      <th>Topic_5</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>431</td>\n","      <td>In July 2020, Cargill received a grievance aga...</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>432</td>\n","      <td>A grievance was filed against Agropalma regard...</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>433</td>\n","      <td>This grievance was filed by Friends of the Ear...</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>434</td>\n","      <td>A grievance was filed against Brasil Bio Fuels...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>435</td>\n","      <td>A grievance was filed by Link-Ar Borneo agains...</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7063f0cf-59e1-40c3-8555-73af449b13bf')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-7063f0cf-59e1-40c3-8555-73af449b13bf button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-7063f0cf-59e1-40c3-8555-73af449b13bf');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-8158c9b9-ac2a-45cb-8ccf-5bb424440f9b\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8158c9b9-ac2a-45cb-8ccf-5bb424440f9b')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-8158c9b9-ac2a-45cb-8ccf-5bb424440f9b button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"display(test_df\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"pk\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 431,\n        \"max\": 435,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          432,\n          435,\n          433\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"summary\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"A grievance was filed against Agropalma regarding human rights issues involving Quilombola communities near the Acar\\u00e1 River in Brazil. The case involves land rights conflicts with indigenous communities, which led to the temporary suspension of Agropalma's RSPO certification in February 2023 and again in January 2024. There was also an incident of unauthorized occupation of Agropalma's plantation in November 2023, followed by the discovery of a body in the area which is under investigation by Federal Police.\",\n          \"A grievance was filed by Link-Ar Borneo against Cargill's subsidiary PT Poliplant Sejahtera (PSA) in West Kalimantan, Indonesia. The grievance alleges that PSA did not fully compensate Farmer 'LK' for his plot inside the estate according to agreed conditions of ownership transfer since 2009. PSA maintains they have documented evidence including notarized acceptance of transfer that refutes these allegations.\",\n          \"This grievance was filed by Friends of the Earth and WALHI against Astra Agro Lestari (AAL) in Indonesia, alleging land conflicts related to their palm oil operations. The case involves disputed land rights where AAL claims they obtained proper Rights To Cultivate (HGU) in 1997, while communities contest these claims. AAL has commissioned independent investigations, developed a Human Rights Due Diligence strategy, and published an action plan, though some stakeholders like FoE have rejected their verification report.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Topic_0\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Topic_1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Topic_2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Topic_3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Topic_4\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Topic_5\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}}],"source":["# Display the head of the updated DataFrame to confirm\n","display(test_df.head())"]},{"cell_type":"markdown","metadata":{"id":"05VHmy17VfOL"},"source":["# Twitter"]},{"cell_type":"code","execution_count":24,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"collapsed":true,"executionInfo":{"elapsed":8979,"status":"ok","timestamp":1754492668230,"user":{"displayName":"Uriel Fuentes","userId":"03460244563483632293"},"user_tz":300},"id":"1efmozRsVe-O","outputId":"cae3ec66-a577-4188-a1b6-a3432af834a3"},"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: transformers in /usr/local/lib/python3.11/dist-packages (4.54.0)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.11/dist-packages (from transformers) (3.18.0)\n","Requirement already satisfied: huggingface-hub<1.0,>=0.34.0 in /usr/local/lib/python3.11/dist-packages (from transformers) (0.34.1)\n","Requirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.11/dist-packages (from transformers) (2.0.2)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.11/dist-packages (from transformers) (25.0)\n","Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.11/dist-packages (from transformers) (6.0.2)\n","Requirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.11/dist-packages (from transformers) (2024.11.6)\n","Requirement already satisfied: requests in /usr/local/lib/python3.11/dist-packages (from transformers) (2.32.3)\n","Requirement already satisfied: tokenizers<0.22,>=0.21 in /usr/local/lib/python3.11/dist-packages (from transformers) (0.21.2)\n","Requirement already satisfied: safetensors>=0.4.3 in /usr/local/lib/python3.11/dist-packages (from transformers) (0.5.3)\n","Requirement already satisfied: tqdm>=4.27 in /usr/local/lib/python3.11/dist-packages (from transformers) (4.67.1)\n","Requirement already satisfied: fsspec>=2023.5.0 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub<1.0,>=0.34.0->transformers) (2025.3.0)\n","Requirement already satisfied: typing-extensions>=3.7.4.3 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub<1.0,>=0.34.0->transformers) (4.14.1)\n","Requirement already satisfied: hf-xet<2.0.0,>=1.1.3 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub<1.0,>=0.34.0->transformers) (1.1.5)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (3.4.2)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (3.10)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (2.5.0)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (2025.7.14)\n","Requirement already satisfied: datasets in /usr/local/lib/python3.11/dist-packages (4.0.0)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.11/dist-packages (from datasets) (3.18.0)\n","Requirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.11/dist-packages (from datasets) (2.0.2)\n","Requirement already satisfied: pyarrow>=15.0.0 in /usr/local/lib/python3.11/dist-packages (from datasets) (18.1.0)\n","Requirement already satisfied: dill<0.3.9,>=0.3.0 in /usr/local/lib/python3.11/dist-packages (from datasets) (0.3.8)\n","Requirement already satisfied: pandas in /usr/local/lib/python3.11/dist-packages (from datasets) (2.2.2)\n","Requirement already satisfied: requests>=2.32.2 in /usr/local/lib/python3.11/dist-packages (from datasets) (2.32.3)\n","Requirement already satisfied: tqdm>=4.66.3 in /usr/local/lib/python3.11/dist-packages (from datasets) (4.67.1)\n","Requirement already satisfied: xxhash in /usr/local/lib/python3.11/dist-packages (from datasets) (3.5.0)\n","Requirement already satisfied: multiprocess<0.70.17 in /usr/local/lib/python3.11/dist-packages (from datasets) (0.70.16)\n","Requirement already satisfied: fsspec<=2025.3.0,>=2023.1.0 in /usr/local/lib/python3.11/dist-packages (from fsspec[http]<=2025.3.0,>=2023.1.0->datasets) (2025.3.0)\n","Requirement already satisfied: huggingface-hub>=0.24.0 in /usr/local/lib/python3.11/dist-packages (from datasets) (0.34.1)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.11/dist-packages (from datasets) (25.0)\n","Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.11/dist-packages (from datasets) (6.0.2)\n","Requirement already satisfied: aiohttp!=4.0.0a0,!=4.0.0a1 in /usr/local/lib/python3.11/dist-packages (from fsspec[http]<=2025.3.0,>=2023.1.0->datasets) (3.12.14)\n","Requirement already satisfied: typing-extensions>=3.7.4.3 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub>=0.24.0->datasets) (4.14.1)\n","Requirement already satisfied: hf-xet<2.0.0,>=1.1.3 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub>=0.24.0->datasets) (1.1.5)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests>=2.32.2->datasets) (3.4.2)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests>=2.32.2->datasets) (3.10)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests>=2.32.2->datasets) (2.5.0)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests>=2.32.2->datasets) (2025.7.14)\n","Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas->datasets) (2.9.0.post0)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas->datasets) (2025.2)\n","Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas->datasets) (2025.2)\n","Requirement already satisfied: aiohappyeyeballs>=2.5.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]<=2025.3.0,>=2023.1.0->datasets) (2.6.1)\n","Requirement already satisfied: aiosignal>=1.4.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]<=2025.3.0,>=2023.1.0->datasets) (1.4.0)\n","Requirement already satisfied: attrs>=17.3.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]<=2025.3.0,>=2023.1.0->datasets) (25.3.0)\n","Requirement already satisfied: frozenlist>=1.1.1 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]<=2025.3.0,>=2023.1.0->datasets) (1.7.0)\n","Requirement already satisfied: multidict<7.0,>=4.5 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]<=2025.3.0,>=2023.1.0->datasets) (6.6.3)\n","Requirement already satisfied: propcache>=0.2.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]<=2025.3.0,>=2023.1.0->datasets) (0.3.2)\n","Requirement already satisfied: yarl<2.0,>=1.17.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]<=2025.3.0,>=2023.1.0->datasets) (1.20.1)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas->datasets) (1.17.0)\n"]}],"source":["# Imports\n","\n","!pip install transformers\n","!pip install -U datasets\n","\n","from collections import defaultdict, Counter\n","import json\n","import numpy as np\n","import torch\n","import pandas as pd\n","\n","from matplotlib import pyplot as plt\n","\n","from transformers import AutoTokenizer, AutoModelForSequenceClassification, AutoModel\n","from datasets import load_dataset, DatasetDict\n","from torch.utils.data import DataLoader\n","from transformers import DistilBertConfig, DistilBertTokenizer, DistilBertForSequenceClassification, DistilBertModel\n","from transformers import get_linear_schedule_with_warmup\n","from tqdm.notebook import tqdm\n","from torch.optim import AdamW\n","from transformers import set_seed\n","from sklearn.metrics import accuracy_score, f1_score\n","from datasets import load_dataset, DatasetDict, Dataset\n","from torch.utils.data import DataLoader"]},{"cell_type":"markdown","metadata":{"id":"mOV9MDcPZN0x"},"source":["# Tokenizer"]},{"cell_type":"code","execution_count":25,"metadata":{"id":"YVSa564uWoxD","executionInfo":{"status":"ok","timestamp":1754492668235,"user_tz":300,"elapsed":3,"user":{"displayName":"Uriel Fuentes","userId":"03460244563483632293"}}},"outputs":[],"source":["tokenizer_length = 512"]},{"cell_type":"code","execution_count":26,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":549,"referenced_widgets":["73cf992c7ed74554a5912d89eea2159e","7a5a520d75174a80a63ebe1941fcf2ec","6df866819b2e4b42aec4ac338c36d54b","b9a843adf66a4d5299f74d091176e50a","95206c5f5659477cb7da11ec16540e75","ff7d23e3573c43adba8fd62cb86d3068","1f39aeee6f5a4c91bc7336e50fa5559e","29506c43b8874153836118b72c13549f","8566aa6d0ab841c891f973e97bd688e8","dc79e796be784ab2b9744c374049ffda","5ddca62249664a2a9ef5c1da194e4561","3c6ffe3ea5154a1fbaf5e2b5732afaeb","d4d41b73969b4250a1a5256d29c20c07","ed58a21e17e04e17927b9c3ec3be8443","3008817f065540afbbed5b44d51131f6","15be4ff55ef74b34a4a5494a7f7efb70","7d901b7eda744784966821d362abb16a","055487d5ebd0421287f3b205b1e01c36","d8898267031543b0a2489c72e0b29468","f730f4927da24410bde2ebe94b06aa6a","1125eb8b6050481bb50123000d4ebc9e","3ebb2392e92b494a8b254d01fcca2d06","82db5cf041eb458486edafb08d81270c","e52e2f2b648c4f2f8b4cb724b90d8b0e","b0cc1acf74904a01a11d02dbd4728d75","52beb72c53ec47be845e7448570f1d84","1f1c0faf41934529a1cf00b382fa91e6","04d39d4d3e61447ebeba9b3ec4c432b0","2df615fa5e604a188986077b27883034","5b1cda77da984a4bba171e2659c1677b","2215bb2e3dec42bf9f41364f394ab55c","e7651200f909404e8e2a3ca36efbe3f6","90c1e60ffcde40268639f6009cf2cca8"]},"executionInfo":{"elapsed":2372,"status":"ok","timestamp":1754492670609,"user":{"displayName":"Uriel Fuentes","userId":"03460244563483632293"},"user_tz":300},"id":"edOrOn4IWcrX","outputId":"6243027d-3b99-4bca-97ae-71e6540d808f"},"outputs":[{"output_type":"display_data","data":{"text/plain":["Map:   0%|          | 0/309 [00:00<?, ? examples/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"73cf992c7ed74554a5912d89eea2159e"}},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Tokenized training dataset features: ['labels', '__index_level_0__', 'input_ids', 'attention_mask']\n","Training dataset size: 309\n","\n","Sample training data shapes:\n","- input_ids: torch.Size([512])\n","- attention_mask: torch.Size([512])\n","- labels shape: torch.Size([6])\n","- labels type: <class 'torch.Tensor'>\n"]},{"output_type":"display_data","data":{"text/plain":["Map:   0%|          | 0/78 [00:00<?, ? examples/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"3c6ffe3ea5154a1fbaf5e2b5732afaeb"}},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n","Tokenized validation dataset size: 78\n","Sample validation data shapes:\n","- input_ids: torch.Size([512])\n","- attention_mask: torch.Size([512])\n","- labels shape: torch.Size([6])\n","- labels type: <class 'torch.Tensor'>\n"]},{"output_type":"display_data","data":{"text/plain":["Map:   0%|          | 0/170 [00:00<?, ? examples/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"82db5cf041eb458486edafb08d81270c"}},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n","Tokenized test dataset size: 170\n","Sample test data shapes:\n","- input_ids: torch.Size([512])\n","- attention_mask: torch.Size([512])\n","- labels: tensor([0, 1, 0, 1, 1, 0])\n","- labels type: <class 'torch.Tensor'>\n","- pk: 431\n","- pk type: <class 'torch.Tensor'>\n"]}],"source":["# Tokenizing\n","\n","# Train and Validation\n","tokenizer = AutoTokenizer.from_pretrained(\"Twitter/twhin-bert-base\")\n","\n","# Convert pandas Series to datasets.Dataset for easier mapping\n","# Exclude 'Document_Num' from labels for training and validation sets\n","topic_columns = [col for col in dominant_topic_df.columns if col.startswith('Topic_') and len(col) == 7 and not col.endswith('_Perc')]\n","train_dataset = Dataset.from_pandas(pd.DataFrame({'Text': X_train, 'labels': y_train[topic_columns].values.tolist()}))\n","val_dataset = Dataset.from_pandas(pd.DataFrame({'Text': X_val, 'labels': y_val[topic_columns].values.tolist()}))\n","\n","# Apply tokenization using map\n","tokenized_train = train_dataset.map(\n","    lambda example: tokenizer(example['Text'],\n","                             padding=\"max_length\",\n","                             truncation=True,\n","                             max_length=tokenizer_length),\n","    batched=True\n",")\n","\n","# Remove the original text column (we don't need it after tokenization)\n","tokenized_train = tokenized_train.remove_columns(['Text'])\n","\n","# Set format to torch tensors\n","tokenized_train.set_format(\"torch\")\n","\n","# Check the results\n","print(\"Tokenized training dataset features:\", tokenized_train.column_names)\n","print(\"Training dataset size:\", len(tokenized_train))\n","print(\"\\nSample training data shapes:\")\n","print(f\"- input_ids: {tokenized_train[0]['input_ids'].shape}\")\n","print(f\"- attention_mask: {tokenized_train[0]['attention_mask'].shape}\")\n","print(f\"- labels shape: {tokenized_train[0]['labels'].shape}\")\n","print(f\"- labels type: {type(tokenized_train[0]['labels'])}\")\n","\n","\n","tokenized_validation = val_dataset.map(\n","    lambda example: tokenizer(example['Text'],\n","                             padding=\"max_length\",\n","                             truncation=True,\n","                             max_length=tokenizer_length,),\n","    batched=True\n",")\n","\n","tokenized_validation = tokenized_validation.remove_columns(['Text'])\n","\n","tokenized_validation.set_format(\"torch\")\n","\n","print(\"\\nTokenized validation dataset size:\", len(tokenized_validation))\n","print(\"Sample validation data shapes:\")\n","print(f\"- input_ids: {tokenized_validation[0]['input_ids'].shape}\")\n","print(f\"- attention_mask: {tokenized_validation[0]['attention_mask'].shape}\")\n","print(f\"- labels shape: {tokenized_validation[0]['labels'].shape}\")\n","print(f\"- labels type: {type(tokenized_validation[0]['labels'])}\")\n","\n","\n","# Test\n","# Separate features and labels for the test set\n","# Use 'summary' as the text feature and the multi-hot encoded topics as the labels\n","X_test = test_df['summary']\n","# Convert the multi-hot encoded topic labels to a list of lists\n","y_test_labels_list = test_df[topic_columns].values.tolist()\n","test_pk = test_df['pk'] # Keep 'pk' separately\n","\n","test_dataset = Dataset.from_pandas(pd.DataFrame({'Text': X_test, 'labels': y_test_labels_list, 'pk': test_pk}))\n","\n","tokenized_test = test_dataset.map(\n","     lambda example: tokenizer(example['Text'],\n","                              padding=\"max_length\",\n","                              truncation=True,\n","                              max_length=tokenizer_length),\n","    batched=True\n",")\n","\n","tokenized_test = tokenized_test.remove_columns(['Text'])\n","tokenized_test.set_format(\"torch\")\n","\n","print(\"\\nTokenized test dataset size:\", len(tokenized_test))\n","print(\"Sample test data shapes:\")\n","print(f\"- input_ids: {tokenized_test[0]['input_ids'].shape}\")\n","print(f\"- attention_mask: {tokenized_test[0]['attention_mask'].shape}\")\n","# The labels for the test set are now the multi-hot encoded labels\n","print(f\"- labels: {tokenized_test[0]['labels']}\")\n","print(f\"- labels type: {type(tokenized_test[0]['labels'])}\")\n","print(f\"- pk: {tokenized_test[0]['pk']}\")\n","print(f\"- pk type: {type(tokenized_test[0]['pk'])}\")"]},{"cell_type":"markdown","metadata":{"id":"ZDH5KgnxZQ7R"},"source":["# Batchify Data"]},{"cell_type":"code","execution_count":27,"metadata":{"id":"x7TsWAtsZLky","executionInfo":{"status":"ok","timestamp":1754492670630,"user_tz":300,"elapsed":18,"user":{"displayName":"Uriel Fuentes","userId":"03460244563483632293"}}},"outputs":[],"source":["batch_size = 4 # Base is 4"]},{"cell_type":"code","execution_count":28,"metadata":{"id":"PdN0FUh30dDQ","executionInfo":{"status":"ok","timestamp":1754492670663,"user_tz":300,"elapsed":30,"user":{"displayName":"Uriel Fuentes","userId":"03460244563483632293"}}},"outputs":[],"source":["train_dataset = tokenized_train.shuffle(seed=1111).select(range(309))\n","train_dataloader = DataLoader(train_dataset, batch_size=batch_size)\n","eval_dataloader = DataLoader(tokenized_validation, batch_size=batch_size)"]},{"cell_type":"markdown","metadata":{"id":"LW4jTbT4ZgAC"},"source":["# Training and Validation"]},{"cell_type":"code","execution_count":29,"metadata":{"id":"pk4aB8mjZjmq","executionInfo":{"status":"ok","timestamp":1754492670669,"user_tz":300,"elapsed":3,"user":{"displayName":"Uriel Fuentes","userId":"03460244563483632293"}}},"outputs":[],"source":["model_path = '/content/gdrive/MyDrive/Group 3: palm oil topic classifier/Text Classification Models/Twitter_Saved_Models/Twitter '\n","model_name = \"Twitter\""]},{"cell_type":"code","execution_count":30,"metadata":{"id":"mjkLbicBZqcj","executionInfo":{"status":"ok","timestamp":1754492670686,"user_tz":300,"elapsed":15,"user":{"displayName":"Uriel Fuentes","userId":"03460244563483632293"}}},"outputs":[],"source":["# set_seed(42)\n","\n","# # Use GPU if available\n","# device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n","\n","# model = AutoModelForSequenceClassification.from_pretrained(\n","#           \"Twitter/twhin-bert-base\",\n","#           num_labels=6,\n","#           hidden_dropout_prob=0.4,\n","#           attention_probs_dropout_prob=0.4\n","#       ).to(device)\n","\n","# num_epochs = 50\n","# num_training_steps = len(train_dataloader) * num_epochs\n","\n","# # optimizer = AdamW(model.parameters(), lr=3e-5, weight_decay=0.01)\n","# optimizer = AdamW(model.parameters(), lr=1.52e-05, weight_decay=0.18,)  # Halved Learning Rate\n","\n","# # lr_scheduler = get_linear_schedule_with_warmup(optimizer, num_warmup_steps=0, num_training_steps=num_training_steps)\n","# lr_scheduler = get_linear_schedule_with_warmup(\n","#     optimizer,\n","#     num_warmup_steps=int(0.113 * num_training_steps),  # 10% warmup\n","#     num_training_steps=num_training_steps\n","# )\n","\n","# # Use BCEWithLogitsLoss for multi-label classification\n","# loss_fct = torch.nn.BCEWithLogitsLoss()\n","\n","# # For Graph\n","# x_epochs = []\n","# y_train = []\n","# y_val = []\n","\n","# best_val_loss = float(\"inf\")\n","\n","# early_stopping = True\n","# early_count = 0 # +1 every time validation loss doesnt improve\n","# early_limit = 5\n","\n","# progress_bar = tqdm(range(num_training_steps))\n","# for epoch in range(num_epochs):\n","#     x_epochs.append(epoch)\n","\n","#     # training\n","#     model.train()\n","#     training_losses = []\n","#     for batch_i, batch in enumerate(train_dataloader):\n","\n","#         optimizer.zero_grad()\n","\n","#         # copy input to device\n","#         input_ids = batch['input_ids'].to(device)\n","#         attention_mask = batch['attention_mask'].to(device)\n","#         # Convert labels to float and move to device\n","#         labels = batch['labels'].to(device).float()\n","\n","\n","#         # output = model(**batch)\n","#         # Pass input_ids and attention_mask to the model\n","#         output = model(input_ids, attention_mask=attention_mask)\n","#         # Calculate loss using BCEWithLogitsLoss\n","#         training_loss = loss_fct(output.logits, labels)\n","\n","#         training_losses.append(training_loss.item())\n","\n","#         #backprop and update params by taking an optimization step\n","#         training_loss.backward()\n","#         optimizer.step()\n","#         lr_scheduler.step()\n","#         progress_bar.update(1)\n","#     print(f\"\\nEpoch {epoch}:\")\n","#     print(\"Mean Training Loss\", np.mean(training_losses))\n","#     y_train.append(np.mean(training_losses))\n","\n","#     # validation\n","#     val_loss = 0\n","#     model.eval() #important to call because we dont want to collect gradients\n","#     for batch_i, batch in enumerate(eval_dataloader):\n","#         with torch.no_grad():\n","#             # copy input to device\n","#             input_ids = batch['input_ids'].to(device)\n","#             attention_mask = batch['attention_mask'].to(device)\n","#             # Convert labels to float and move to device\n","#             labels = batch['labels'].to(device).float()\n","#             # output = model(**batch)\n","#             # Pass input_ids and attention_mask to the model\n","#             output = model(input_ids, attention_mask=attention_mask)\n","\n","#         # Calculate loss using BCEWithLogitsLoss\n","#         val_loss += loss_fct(output.logits, labels)\n","\n","\n","#     avg_val_loss = val_loss / len(eval_dataloader)\n","#     print(f\"Validation loss: {avg_val_loss}\")\n","#     y_val.append(avg_val_loss.cpu())\n","\n","#     if avg_val_loss < best_val_loss:\n","#         print(\"Saving checkpoint!\")\n","#         early_count = 0 # Reset counter\n","#         best_val_loss = avg_val_loss\n","#         torch.save({\n","#             'epoch': epoch,\n","#             'model_state_dict': model.state_dict(),\n","#             # 'optimizer_state_dict': optimizer.state_dict(),\n","#             'val_loss': best_val_loss,\n","#             },\n","#             f\"{model_path}best_model.pt\"\n","#         )\n","#     elif early_stopping:\n","#         early_count += 1\n","\n","#         if early_count == early_limit:\n","#             print(f\"Validation loss has not improved for {early_limit} iterations; Early Stopping.\")\n","#             break\n","\n","#     print()"]},{"cell_type":"code","execution_count":31,"metadata":{"id":"M64VA2mdZu3G","executionInfo":{"status":"ok","timestamp":1754492670692,"user_tz":300,"elapsed":2,"user":{"displayName":"Uriel Fuentes","userId":"03460244563483632293"}}},"outputs":[],"source":["# plt.plot(x_epochs, y_val, label=\"Validation Loss\")\n","# plt.plot(x_epochs, y_train, label=\"Mean Training Loss\")\n","# plt.legend()\n","# plt.style.use('fivethirtyeight')\n","# plt.title(\"Validation Loss\")\n","# plt.xlabel(\"Epochs\")"]},{"cell_type":"markdown","metadata":{"id":"YmgAiLNt3__a"},"source":["# Predict on Test"]},{"cell_type":"code","execution_count":32,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":349,"referenced_widgets":["c8f22baed9bf4c18b77c5143620aa442","848ad1258b1e41d286eff12fe62c732c","6c8c0479a28d4258b78fa27ea38743d2","7e06593e0a8943bea99fe51f51d894a8","0f9999b3362647f08ebf036ac48d1913","2517bb07d0e5452d9bb1b3aed35c84c7","fd44c57339d74608be398dd4209d1fd8","f7aadb7c5c5b4b70a39e5103d143e807","8d0e090cd6464f60a316364f3854a24b","0ac7e9b5b949454d910de1e6c5a33b94","95ab356384974bdd8ab84a801662c6a0"]},"id":"Kmk8O7H_l5Me","executionInfo":{"status":"ok","timestamp":1754492676938,"user_tz":300,"elapsed":6243,"user":{"displayName":"Uriel Fuentes","userId":"03460244563483632293"}},"outputId":"198e65b0-950d-429c-84fe-de4a65b09c57"},"outputs":[{"output_type":"stream","name":"stderr","text":["Some weights of BertForSequenceClassification were not initialized from the model checkpoint at Twitter/twhin-bert-base and are newly initialized: ['bert.pooler.dense.bias', 'bert.pooler.dense.weight', 'classifier.bias', 'classifier.weight']\n","You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n"]},{"output_type":"display_data","data":{"text/plain":["Predicting on test data:   0%|          | 0/43 [00:00<?, ?it/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"c8f22baed9bf4c18b77c5143620aa442"}},"metadata":{}},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/torch/nn/modules/module.py:1750: FutureWarning: `encoder_attention_mask` is deprecated and will be removed in version 4.55.0 for `BertSdpaSelfAttention.forward`.\n","  return forward_call(*args, **kwargs)\n","BertSdpaSelfAttention is used but `torch.nn.functional.scaled_dot_product_attention` does not support non-absolute `position_embedding_type` or `output_attentions=True` or `head_mask`. Falling back to the manual attention implementation, but specifying the manual implementation will be required from Transformers version v5.0.0 onwards. This warning can be removed using the argument `attn_implementation=\"eager\"` when loading the model.\n"]},{"output_type":"display_data","data":{"text/plain":["    pk                                            summary  Topic_0_Prob  \\\n","0  431  In July 2020, Cargill received a grievance aga...      0.320617   \n","1  432  A grievance was filed against Agropalma regard...      0.773798   \n","2  433  This grievance was filed by Friends of the Ear...      0.776834   \n","3  434  A grievance was filed against Brasil Bio Fuels...      0.287043   \n","4  435  A grievance was filed by Link-Ar Borneo agains...      0.330839   \n","\n","   Topic_1_Prob  Topic_2_Prob  Topic_3_Prob  Topic_4_Prob  Topic_5_Prob  \n","0      0.022351      0.061806      0.022060      0.007726      0.414137  \n","1      0.014084      0.045238      0.013279      0.021137      0.356708  \n","2      0.013491      0.038796      0.012942      0.025334      0.338881  \n","3      0.005900      0.074135      0.014964      0.052010      0.271632  \n","4      0.009274      0.158465      0.024030      0.009557      0.487537  "],"text/html":["\n","  <div id=\"df-19c3fdd5-bede-4278-a71f-b5d365857b82\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>pk</th>\n","      <th>summary</th>\n","      <th>Topic_0_Prob</th>\n","      <th>Topic_1_Prob</th>\n","      <th>Topic_2_Prob</th>\n","      <th>Topic_3_Prob</th>\n","      <th>Topic_4_Prob</th>\n","      <th>Topic_5_Prob</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>431</td>\n","      <td>In July 2020, Cargill received a grievance aga...</td>\n","      <td>0.320617</td>\n","      <td>0.022351</td>\n","      <td>0.061806</td>\n","      <td>0.022060</td>\n","      <td>0.007726</td>\n","      <td>0.414137</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>432</td>\n","      <td>A grievance was filed against Agropalma regard...</td>\n","      <td>0.773798</td>\n","      <td>0.014084</td>\n","      <td>0.045238</td>\n","      <td>0.013279</td>\n","      <td>0.021137</td>\n","      <td>0.356708</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>433</td>\n","      <td>This grievance was filed by Friends of the Ear...</td>\n","      <td>0.776834</td>\n","      <td>0.013491</td>\n","      <td>0.038796</td>\n","      <td>0.012942</td>\n","      <td>0.025334</td>\n","      <td>0.338881</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>434</td>\n","      <td>A grievance was filed against Brasil Bio Fuels...</td>\n","      <td>0.287043</td>\n","      <td>0.005900</td>\n","      <td>0.074135</td>\n","      <td>0.014964</td>\n","      <td>0.052010</td>\n","      <td>0.271632</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>435</td>\n","      <td>A grievance was filed by Link-Ar Borneo agains...</td>\n","      <td>0.330839</td>\n","      <td>0.009274</td>\n","      <td>0.158465</td>\n","      <td>0.024030</td>\n","      <td>0.009557</td>\n","      <td>0.487537</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-19c3fdd5-bede-4278-a71f-b5d365857b82')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-19c3fdd5-bede-4278-a71f-b5d365857b82 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-19c3fdd5-bede-4278-a71f-b5d365857b82');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-00de2fa7-4f2b-456d-ae50-784140742ed4\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-00de2fa7-4f2b-456d-ae50-784140742ed4')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-00de2fa7-4f2b-456d-ae50-784140742ed4 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"display(prediction_df\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"pk\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 431,\n        \"max\": 435,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          432,\n          435,\n          433\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"summary\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"A grievance was filed against Agropalma regarding human rights issues involving Quilombola communities near the Acar\\u00e1 River in Brazil. The case involves land rights conflicts with indigenous communities, which led to the temporary suspension of Agropalma's RSPO certification in February 2023 and again in January 2024. There was also an incident of unauthorized occupation of Agropalma's plantation in November 2023, followed by the discovery of a body in the area which is under investigation by Federal Police.\",\n          \"A grievance was filed by Link-Ar Borneo against Cargill's subsidiary PT Poliplant Sejahtera (PSA) in West Kalimantan, Indonesia. The grievance alleges that PSA did not fully compensate Farmer 'LK' for his plot inside the estate according to agreed conditions of ownership transfer since 2009. PSA maintains they have documented evidence including notarized acceptance of transfer that refutes these allegations.\",\n          \"This grievance was filed by Friends of the Earth and WALHI against Astra Agro Lestari (AAL) in Indonesia, alleging land conflicts related to their palm oil operations. The case involves disputed land rights where AAL claims they obtained proper Rights To Cultivate (HGU) in 1997, while communities contest these claims. AAL has commissioned independent investigations, developed a Human Rights Due Diligence strategy, and published an action plan, though some stakeholders like FoE have rejected their verification report.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Topic_0_Prob\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.7737983465194702,\n          0.33083945512771606,\n          0.7768343091011047\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Topic_1_Prob\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.01408446952700615,\n          0.009274359792470932,\n          0.013491141609847546\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Topic_2_Prob\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.04523763060569763,\n          0.15846505761146545,\n          0.03879621624946594\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Topic_3_Prob\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.013279340229928493,\n          0.02403012476861477,\n          0.012942342087626457\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Topic_4_Prob\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.021136820316314697,\n          0.009557019919157028,\n          0.025333695113658905\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Topic_5_Prob\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.35670846700668335,\n          0.4875374138355255,\n          0.33888086676597595\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}}],"source":["model = AutoModelForSequenceClassification.from_pretrained(\n","          \"Twitter/twhin-bert-base\",\n","          num_labels=6,\n","          hidden_dropout_prob=0.4,\n","          attention_probs_dropout_prob=0.4\n","      ).to(device)\n","\n","device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n","\n","# Load the best model\n","best_model_path = f\"{model_path}best_model.pt\"\n","checkpoint = torch.load(best_model_path, map_location=device)\n","model.load_state_dict(checkpoint['model_state_dict'])\n","model.eval() # Set the model to evaluation mode\n","\n","\n","# Create a DataLoader for the test set\n","test_dataloader = DataLoader(tokenized_test, batch_size=batch_size)\n","\n","predictions = []\n","pk_values = [] # To store pk values\n","\n","with torch.no_grad():\n","    for batch in tqdm(test_dataloader, desc=\"Predicting on test data\"):\n","        input_ids = batch['input_ids'].to(device)\n","        attention_mask = batch['attention_mask'].to(device)\n","        # Move pk to CPU and convert to numpy\n","        pk = batch['pk'].cpu().numpy()\n","        pk_values.extend(pk)\n","\n","\n","        outputs = model(input_ids, attention_mask=attention_mask)\n","        logits = outputs.logits\n","\n","        # Apply sigmoid to get probabilities\n","        probs = torch.sigmoid(logits)\n","        predictions.extend(probs.cpu().numpy())\n","\n","# Convert predictions to a DataFrame\n","prediction_df = pd.DataFrame(predictions, columns=[f'Topic_{i}_Prob' for i in range(6)])\n","\n","# Add the original text and pk back to the prediction DataFrame\n","# We need to get the original text and pk from the test_df or tokenized_test dataset\n","# Since tokenized_test has 'pk' and we can get 'summary' from test_df using 'pk'\n","# Let's create a mapping from pk to summary from the original test_df\n","pk_to_text = test_df.set_index('pk')['summary'].to_dict()\n","\n","# Add 'pk' and 'summary' to the prediction_df\n","prediction_df['pk'] = pk_values # Use the collected numpy array of pk values\n","prediction_df['summary'] = prediction_df['pk'].map(pk_to_text)\n","\n","# Rearrange columns to have pk and summary first\n","cols = ['pk', 'summary'] + [col for col in prediction_df.columns if col not in ['pk', 'summary']]\n","prediction_df = prediction_df[cols]\n","\n","display(prediction_df.head())"]},{"cell_type":"code","execution_count":33,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"fFAOB-nLhYUx","executionInfo":{"status":"ok","timestamp":1754492676947,"user_tz":300,"elapsed":6,"user":{"displayName":"Uriel Fuentes","userId":"03460244563483632293"}},"outputId":"8aaf9aa4-fb61-48ff-a7d9-cf94763ef239"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["    pk                                            summary  Topic_0  Topic_1  \\\n","0  431  In July 2020, Cargill received a grievance aga...        0        1   \n","1  432  A grievance was filed against Agropalma regard...        1        0   \n","2  433  This grievance was filed by Friends of the Ear...        1        0   \n","3  434  A grievance was filed against Brasil Bio Fuels...        0        0   \n","4  435  A grievance was filed by Link-Ar Borneo agains...        1        0   \n","\n","   Topic_2  Topic_3  Topic_4  Topic_5  \n","0        0        1        1        0  \n","1        0        0        1        0  \n","2        0        0        0        0  \n","3        0        1        1        0  \n","4        0        0        0        0  "],"text/html":["\n","  <div id=\"df-c17bdabe-f538-4653-ad59-8ef767621dd0\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>pk</th>\n","      <th>summary</th>\n","      <th>Topic_0</th>\n","      <th>Topic_1</th>\n","      <th>Topic_2</th>\n","      <th>Topic_3</th>\n","      <th>Topic_4</th>\n","      <th>Topic_5</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>431</td>\n","      <td>In July 2020, Cargill received a grievance aga...</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>432</td>\n","      <td>A grievance was filed against Agropalma regard...</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>433</td>\n","      <td>This grievance was filed by Friends of the Ear...</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>434</td>\n","      <td>A grievance was filed against Brasil Bio Fuels...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>435</td>\n","      <td>A grievance was filed by Link-Ar Borneo agains...</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c17bdabe-f538-4653-ad59-8ef767621dd0')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-c17bdabe-f538-4653-ad59-8ef767621dd0 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-c17bdabe-f538-4653-ad59-8ef767621dd0');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-46ebdb8a-d165-4404-befb-0136c4a1d936\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-46ebdb8a-d165-4404-befb-0136c4a1d936')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-46ebdb8a-d165-4404-befb-0136c4a1d936 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"test_df","summary":"{\n  \"name\": \"test_df\",\n  \"rows\": 170,\n  \"fields\": [\n    {\n      \"column\": \"pk\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 49,\n        \"min\": 431,\n        \"max\": 600,\n        \"num_unique_values\": 170,\n        \"samples\": [\n          570,\n          461,\n          550\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"summary\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 170,\n        \"samples\": [\n          \"PT Prasetya Mitra Muda (Block II): Jalemo was reported for deforestation and peatland development in a Satelligence report shared by Robeco. Hershey may be connected to Jalemo through several suppliers from their H1-21 mill list, and clearance of 76.6ha in Q4-21 was confirmed with Earthworm Foundation support. Hershey reached out to direct suppliers to investigate, but in September 2022 they considered the case closed due to lack of additional details.\",\n          \"Greenpeace raised a grievance against Bumitama in September 2018 regarding deforestation. Cargill engaged with their direct suppliers about the allegations. Bumitama acknowledged gaps in implementing its sustainability policy and took immediate actions to address non-compliances. Additional land clearing was detected in PT Lestari Gemilang Intisawit in March 2019.\",\n          \"PT Permata Hijau was reported by RAN for sourcing from suppliers who clear forests and peatland in the Leuser Ecosystem. Hershey issued \\\"No Buy\\\" orders for PT Permata Hijau, PT Kallista Alam, and PT SPS II between 2018-2020. Despite these actions, Hershey remained linked to PT Permata Hijau through Cargill, who reported completed action plans with the supplier while continuing to monitor their progress.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Topic_0\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Topic_1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Topic_2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Topic_3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Topic_4\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Topic_5\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":33}],"source":["test_df.head()"]},{"cell_type":"code","execution_count":34,"metadata":{"id":"yRCwXLYmkXJJ","executionInfo":{"status":"ok","timestamp":1754492676950,"user_tz":300,"elapsed":2,"user":{"displayName":"Uriel Fuentes","userId":"03460244563483632293"}}},"outputs":[],"source":["# create binary_prediction_df\n","# compare to test_df\n","# calculate f1, accuracy, etc\n","# calculations should be independent of each other"]},{"cell_type":"code","execution_count":35,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":423},"id":"z-bG1-shmIrd","executionInfo":{"status":"ok","timestamp":1754492676990,"user_tz":300,"elapsed":21,"user":{"displayName":"Uriel Fuentes","userId":"03460244563483632293"}},"outputId":"7ad14a2c-1ad0-4ef4-d883-b4b4b1fbeb72"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["      pk                                            summary  Topic_0_Prob  \\\n","0    431  In July 2020, Cargill received a grievance aga...      0.320617   \n","1    432  A grievance was filed against Agropalma regard...      0.773798   \n","2    433  This grievance was filed by Friends of the Ear...      0.776834   \n","3    434  A grievance was filed against Brasil Bio Fuels...      0.287043   \n","4    435  A grievance was filed by Link-Ar Borneo agains...      0.330839   \n","..   ...                                                ...           ...   \n","165  596  A grievance has been filed against PT ASM rega...      0.007880   \n","166  597  The grievance concerns PT SIL & SIP (Sebakis I...      0.027161   \n","167  598  The grievance involves a report by Rainforest ...      0.078042   \n","168  599  This grievance concerns the deforestation of T...      0.022001   \n","169  600  Mighty Earth's Rapid Response Report 42 report...      0.010250   \n","\n","     Topic_1_Prob  Topic_2_Prob  Topic_3_Prob  Topic_4_Prob  Topic_5_Prob  \n","0        0.022351      0.061806      0.022060      0.007726      0.414137  \n","1        0.014084      0.045238      0.013279      0.021137      0.356708  \n","2        0.013491      0.038796      0.012942      0.025334      0.338881  \n","3        0.005900      0.074135      0.014964      0.052010      0.271632  \n","4        0.009274      0.158465      0.024030      0.009557      0.487537  \n","..            ...           ...           ...           ...           ...  \n","165      0.506154      0.096302      0.526944      0.005729      0.145889  \n","166      0.168288      0.137583      0.180962      0.003252      0.404253  \n","167      0.217251      0.082816      0.058600      0.006528      0.378336  \n","168      0.856620      0.037527      0.081207      0.006152      0.129992  \n","169      0.921097      0.026841      0.353585      0.013263      0.057141  \n","\n","[170 rows x 8 columns]"],"text/html":["\n","  <div id=\"df-ce474234-564f-41e0-aec6-3cfb558af851\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>pk</th>\n","      <th>summary</th>\n","      <th>Topic_0_Prob</th>\n","      <th>Topic_1_Prob</th>\n","      <th>Topic_2_Prob</th>\n","      <th>Topic_3_Prob</th>\n","      <th>Topic_4_Prob</th>\n","      <th>Topic_5_Prob</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>431</td>\n","      <td>In July 2020, Cargill received a grievance aga...</td>\n","      <td>0.320617</td>\n","      <td>0.022351</td>\n","      <td>0.061806</td>\n","      <td>0.022060</td>\n","      <td>0.007726</td>\n","      <td>0.414137</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>432</td>\n","      <td>A grievance was filed against Agropalma regard...</td>\n","      <td>0.773798</td>\n","      <td>0.014084</td>\n","      <td>0.045238</td>\n","      <td>0.013279</td>\n","      <td>0.021137</td>\n","      <td>0.356708</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>433</td>\n","      <td>This grievance was filed by Friends of the Ear...</td>\n","      <td>0.776834</td>\n","      <td>0.013491</td>\n","      <td>0.038796</td>\n","      <td>0.012942</td>\n","      <td>0.025334</td>\n","      <td>0.338881</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>434</td>\n","      <td>A grievance was filed against Brasil Bio Fuels...</td>\n","      <td>0.287043</td>\n","      <td>0.005900</td>\n","      <td>0.074135</td>\n","      <td>0.014964</td>\n","      <td>0.052010</td>\n","      <td>0.271632</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>435</td>\n","      <td>A grievance was filed by Link-Ar Borneo agains...</td>\n","      <td>0.330839</td>\n","      <td>0.009274</td>\n","      <td>0.158465</td>\n","      <td>0.024030</td>\n","      <td>0.009557</td>\n","      <td>0.487537</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>165</th>\n","      <td>596</td>\n","      <td>A grievance has been filed against PT ASM rega...</td>\n","      <td>0.007880</td>\n","      <td>0.506154</td>\n","      <td>0.096302</td>\n","      <td>0.526944</td>\n","      <td>0.005729</td>\n","      <td>0.145889</td>\n","    </tr>\n","    <tr>\n","      <th>166</th>\n","      <td>597</td>\n","      <td>The grievance concerns PT SIL &amp; SIP (Sebakis I...</td>\n","      <td>0.027161</td>\n","      <td>0.168288</td>\n","      <td>0.137583</td>\n","      <td>0.180962</td>\n","      <td>0.003252</td>\n","      <td>0.404253</td>\n","    </tr>\n","    <tr>\n","      <th>167</th>\n","      <td>598</td>\n","      <td>The grievance involves a report by Rainforest ...</td>\n","      <td>0.078042</td>\n","      <td>0.217251</td>\n","      <td>0.082816</td>\n","      <td>0.058600</td>\n","      <td>0.006528</td>\n","      <td>0.378336</td>\n","    </tr>\n","    <tr>\n","      <th>168</th>\n","      <td>599</td>\n","      <td>This grievance concerns the deforestation of T...</td>\n","      <td>0.022001</td>\n","      <td>0.856620</td>\n","      <td>0.037527</td>\n","      <td>0.081207</td>\n","      <td>0.006152</td>\n","      <td>0.129992</td>\n","    </tr>\n","    <tr>\n","      <th>169</th>\n","      <td>600</td>\n","      <td>Mighty Earth's Rapid Response Report 42 report...</td>\n","      <td>0.010250</td>\n","      <td>0.921097</td>\n","      <td>0.026841</td>\n","      <td>0.353585</td>\n","      <td>0.013263</td>\n","      <td>0.057141</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>170 rows × 8 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ce474234-564f-41e0-aec6-3cfb558af851')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-ce474234-564f-41e0-aec6-3cfb558af851 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-ce474234-564f-41e0-aec6-3cfb558af851');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-d0bad95f-368d-479c-a8ea-24fc1d680074\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d0bad95f-368d-479c-a8ea-24fc1d680074')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-d0bad95f-368d-479c-a8ea-24fc1d680074 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","  <div id=\"id_346b820a-799c-426c-b0df-1073e486790a\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('prediction_df')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_346b820a-799c-426c-b0df-1073e486790a button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('prediction_df');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"prediction_df","summary":"{\n  \"name\": \"prediction_df\",\n  \"rows\": 170,\n  \"fields\": [\n    {\n      \"column\": \"pk\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 49,\n        \"min\": 431,\n        \"max\": 600,\n        \"num_unique_values\": 170,\n        \"samples\": [\n          570,\n          461,\n          550\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"summary\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 170,\n        \"samples\": [\n          \"PT Prasetya Mitra Muda (Block II): Jalemo was reported for deforestation and peatland development in a Satelligence report shared by Robeco. Hershey may be connected to Jalemo through several suppliers from their H1-21 mill list, and clearance of 76.6ha in Q4-21 was confirmed with Earthworm Foundation support. Hershey reached out to direct suppliers to investigate, but in September 2022 they considered the case closed due to lack of additional details.\",\n          \"Greenpeace raised a grievance against Bumitama in September 2018 regarding deforestation. Cargill engaged with their direct suppliers about the allegations. Bumitama acknowledged gaps in implementing its sustainability policy and took immediate actions to address non-compliances. Additional land clearing was detected in PT Lestari Gemilang Intisawit in March 2019.\",\n          \"PT Permata Hijau was reported by RAN for sourcing from suppliers who clear forests and peatland in the Leuser Ecosystem. Hershey issued \\\"No Buy\\\" orders for PT Permata Hijau, PT Kallista Alam, and PT SPS II between 2018-2020. Despite these actions, Hershey remained linked to PT Permata Hijau through Cargill, who reported completed action plans with the supplier while continuing to monitor their progress.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Topic_0_Prob\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 170,\n        \"samples\": [\n          0.008804273791611195,\n          0.028884518891572952,\n          0.007669818587601185\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Topic_1_Prob\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 170,\n        \"samples\": [\n          0.6161665916442871,\n          0.16245125234127045,\n          0.06894143670797348\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Topic_2_Prob\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 170,\n        \"samples\": [\n          0.04310564696788788,\n          0.12193334102630615,\n          0.40903550386428833\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Topic_3_Prob\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 170,\n        \"samples\": [\n          0.7193566560745239,\n          0.17166458070278168,\n          0.47422319650650024\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Topic_4_Prob\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 170,\n        \"samples\": [\n          0.009791949763894081,\n          0.004210374783724546,\n          0.01231538224965334\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Topic_5_Prob\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 170,\n        \"samples\": [\n          0.08522652089595795,\n          0.3603227138519287,\n          0.20204895734786987\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":35}],"source":["prediction_df"]},{"cell_type":"code","source":["from sklearn.metrics import accuracy_score, f1_score\n","\n","# Define the threshold for converting probabilities to binary labels\n","evaluation_threshold = 0.1\n","\n","# Get the predicted probabilities for the topic columns from prediction_df\n","topic_prob_columns = [col for col in prediction_df.columns if col.startswith('Topic_') and col.endswith('_Prob')]\n","predicted_probs = prediction_df[topic_prob_columns].values\n","\n","# Convert probabilities to binary predictions using the threshold\n","binary_predictions = (predicted_probs >= evaluation_threshold).astype(int)\n","\n","# Get the true multi-hot encoded labels from test_df\n","# Ensure alignment with prediction_df based on 'pk'\n","# Assuming test_df contains 'pk' and 'Topic_0' through 'Topic_5'\n","true_labels_for_eval = pd.merge(prediction_df[['pk']], test_df[['pk'] + [f'Topic_{i}' for i in range(6)]], on='pk', how='left')\n","\n","# Extract the true labels in the correct order\n","true_labels_values = true_labels_for_eval[[f'Topic_{i}' for i in range(6)]].values\n","\n","# Create a DataFrame for binary predictions (optional, but requested)\n","binary_prediction_df = pd.DataFrame(binary_predictions, columns=[f'Topic_{i}' for i in range(6)])\n","# Add pk for potential merging or inspection\n","binary_prediction_df['pk'] = prediction_df['pk']\n","# Rearrange columns\n","cols = ['pk'] + [col for col in binary_prediction_df.columns if col != 'pk']\n","binary_prediction_df = binary_prediction_df[cols]\n","\n","\n","# Display the probability predictions DataFrame\n","print(\"Probability Predictions (first 5 rows):\")\n","display(prediction_df.head())\n","\n","# Display the binary predictions DataFrame\n","print(\"\\nBinary Predictions (first 5 rows):\")\n","display(binary_prediction_df.head())\n","\n","\n","# Calculate Overall Accuracy, Micro F1 Score, and Macro F1 Score\n","overall_accuracy = accuracy_score(true_labels_values, binary_predictions)\n","overall_f1_micro = f1_score(true_labels_values, binary_predictions, average='micro')\n","overall_f1_macro = f1_score(true_labels_values, binary_predictions, average='macro')\n","\n","\n","print(f\"\\nOverall Evaluation Results (Threshold = {evaluation_threshold}):\")\n","print(f\"Accuracy: {overall_accuracy:.4f}\")\n","print(f\"Micro F1 Score: {overall_f1_micro:.4f}\")\n","print(f\"Macro F1 Score: {overall_f1_macro:.4f}\")\n","\n","\n","# Calculate Accuracy and F1 Score for each label\n","print(\"\\nEvaluation Results per Label (Threshold =\", evaluation_threshold, \"):\")\n","for i in range(6):\n","    topic_col_name = f'Topic_{i}'\n","    # Accuracy for the current label\n","    accuracy = accuracy_score(true_labels_values[:, i], binary_predictions[:, i])\n","    # F1 score for the current label\n","    f1 = f1_score(true_labels_values[:, i], binary_predictions[:, i])\n","\n","    print(f\"{topic_col_name}: Accuracy = {accuracy:.4f}, F1 Score = {f1:.4f}\")\n","\n","# Note: You can easily change the 'evaluation_threshold' variable above and re-run this cell\n","# to see the impact on accuracy and F1 score for each label."],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":685},"id":"se7ezp6Esyx2","executionInfo":{"status":"ok","timestamp":1754492677036,"user_tz":300,"elapsed":45,"user":{"displayName":"Uriel Fuentes","userId":"03460244563483632293"}},"outputId":"24f114b5-0811-408e-d645-e205da47b085"},"execution_count":36,"outputs":[{"output_type":"stream","name":"stdout","text":["Probability Predictions (first 5 rows):\n"]},{"output_type":"display_data","data":{"text/plain":["    pk                                            summary  Topic_0_Prob  \\\n","0  431  In July 2020, Cargill received a grievance aga...      0.320617   \n","1  432  A grievance was filed against Agropalma regard...      0.773798   \n","2  433  This grievance was filed by Friends of the Ear...      0.776834   \n","3  434  A grievance was filed against Brasil Bio Fuels...      0.287043   \n","4  435  A grievance was filed by Link-Ar Borneo agains...      0.330839   \n","\n","   Topic_1_Prob  Topic_2_Prob  Topic_3_Prob  Topic_4_Prob  Topic_5_Prob  \n","0      0.022351      0.061806      0.022060      0.007726      0.414137  \n","1      0.014084      0.045238      0.013279      0.021137      0.356708  \n","2      0.013491      0.038796      0.012942      0.025334      0.338881  \n","3      0.005900      0.074135      0.014964      0.052010      0.271632  \n","4      0.009274      0.158465      0.024030      0.009557      0.487537  "],"text/html":["\n","  <div id=\"df-22190b8d-a220-4724-84d7-2f56fe2aa12e\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>pk</th>\n","      <th>summary</th>\n","      <th>Topic_0_Prob</th>\n","      <th>Topic_1_Prob</th>\n","      <th>Topic_2_Prob</th>\n","      <th>Topic_3_Prob</th>\n","      <th>Topic_4_Prob</th>\n","      <th>Topic_5_Prob</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>431</td>\n","      <td>In July 2020, Cargill received a grievance aga...</td>\n","      <td>0.320617</td>\n","      <td>0.022351</td>\n","      <td>0.061806</td>\n","      <td>0.022060</td>\n","      <td>0.007726</td>\n","      <td>0.414137</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>432</td>\n","      <td>A grievance was filed against Agropalma regard...</td>\n","      <td>0.773798</td>\n","      <td>0.014084</td>\n","      <td>0.045238</td>\n","      <td>0.013279</td>\n","      <td>0.021137</td>\n","      <td>0.356708</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>433</td>\n","      <td>This grievance was filed by Friends of the Ear...</td>\n","      <td>0.776834</td>\n","      <td>0.013491</td>\n","      <td>0.038796</td>\n","      <td>0.012942</td>\n","      <td>0.025334</td>\n","      <td>0.338881</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>434</td>\n","      <td>A grievance was filed against Brasil Bio Fuels...</td>\n","      <td>0.287043</td>\n","      <td>0.005900</td>\n","      <td>0.074135</td>\n","      <td>0.014964</td>\n","      <td>0.052010</td>\n","      <td>0.271632</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>435</td>\n","      <td>A grievance was filed by Link-Ar Borneo agains...</td>\n","      <td>0.330839</td>\n","      <td>0.009274</td>\n","      <td>0.158465</td>\n","      <td>0.024030</td>\n","      <td>0.009557</td>\n","      <td>0.487537</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-22190b8d-a220-4724-84d7-2f56fe2aa12e')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-22190b8d-a220-4724-84d7-2f56fe2aa12e button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-22190b8d-a220-4724-84d7-2f56fe2aa12e');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-ecc38094-fbb4-4582-b325-ac519268cc1a\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ecc38094-fbb4-4582-b325-ac519268cc1a')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-ecc38094-fbb4-4582-b325-ac519268cc1a button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"# to see the impact on accuracy and F1 score for each label\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"pk\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 431,\n        \"max\": 435,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          432,\n          435,\n          433\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"summary\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"A grievance was filed against Agropalma regarding human rights issues involving Quilombola communities near the Acar\\u00e1 River in Brazil. The case involves land rights conflicts with indigenous communities, which led to the temporary suspension of Agropalma's RSPO certification in February 2023 and again in January 2024. There was also an incident of unauthorized occupation of Agropalma's plantation in November 2023, followed by the discovery of a body in the area which is under investigation by Federal Police.\",\n          \"A grievance was filed by Link-Ar Borneo against Cargill's subsidiary PT Poliplant Sejahtera (PSA) in West Kalimantan, Indonesia. The grievance alleges that PSA did not fully compensate Farmer 'LK' for his plot inside the estate according to agreed conditions of ownership transfer since 2009. PSA maintains they have documented evidence including notarized acceptance of transfer that refutes these allegations.\",\n          \"This grievance was filed by Friends of the Earth and WALHI against Astra Agro Lestari (AAL) in Indonesia, alleging land conflicts related to their palm oil operations. The case involves disputed land rights where AAL claims they obtained proper Rights To Cultivate (HGU) in 1997, while communities contest these claims. AAL has commissioned independent investigations, developed a Human Rights Due Diligence strategy, and published an action plan, though some stakeholders like FoE have rejected their verification report.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Topic_0_Prob\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.7737983465194702,\n          0.33083945512771606,\n          0.7768343091011047\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Topic_1_Prob\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.01408446952700615,\n          0.009274359792470932,\n          0.013491141609847546\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Topic_2_Prob\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.04523763060569763,\n          0.15846505761146545,\n          0.03879621624946594\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Topic_3_Prob\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.013279340229928493,\n          0.02403012476861477,\n          0.012942342087626457\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Topic_4_Prob\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.021136820316314697,\n          0.009557019919157028,\n          0.025333695113658905\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Topic_5_Prob\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.35670846700668335,\n          0.4875374138355255,\n          0.33888086676597595\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n","Binary Predictions (first 5 rows):\n"]},{"output_type":"display_data","data":{"text/plain":["    pk  Topic_0  Topic_1  Topic_2  Topic_3  Topic_4  Topic_5\n","0  431        1        0        0        0        0        1\n","1  432        1        0        0        0        0        1\n","2  433        1        0        0        0        0        1\n","3  434        1        0        0        0        0        1\n","4  435        1        0        1        0        0        1"],"text/html":["\n","  <div id=\"df-10086e2b-7247-4720-9d20-f4d94c3c2ea8\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>pk</th>\n","      <th>Topic_0</th>\n","      <th>Topic_1</th>\n","      <th>Topic_2</th>\n","      <th>Topic_3</th>\n","      <th>Topic_4</th>\n","      <th>Topic_5</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>431</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>432</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>433</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>434</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>435</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-10086e2b-7247-4720-9d20-f4d94c3c2ea8')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-10086e2b-7247-4720-9d20-f4d94c3c2ea8 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-10086e2b-7247-4720-9d20-f4d94c3c2ea8');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-e1ea822b-ecd5-4b92-93a6-fd2b50a39748\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e1ea822b-ecd5-4b92-93a6-fd2b50a39748')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-e1ea822b-ecd5-4b92-93a6-fd2b50a39748 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"# to see the impact on accuracy and F1 score for each label\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"pk\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 431,\n        \"max\": 435,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          432,\n          435,\n          433\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Topic_0\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 1,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Topic_1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Topic_2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Topic_3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Topic_4\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Topic_5\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 1,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n","Overall Evaluation Results (Threshold = 0.1):\n","Accuracy: 0.0647\n","Micro F1 Score: 0.5651\n","Macro F1 Score: 0.5715\n","\n","Evaluation Results per Label (Threshold = 0.1 ):\n","Topic_0: Accuracy = 0.6941, F1 Score = 0.4694\n","Topic_1: Accuracy = 0.7118, F1 Score = 0.7200\n","Topic_2: Accuracy = 0.6235, F1 Score = 0.5493\n","Topic_3: Accuracy = 0.6941, F1 Score = 0.7204\n","Topic_4: Accuracy = 0.9294, F1 Score = 0.6842\n","Topic_5: Accuracy = 0.2647, F1 Score = 0.2857\n"]}]},{"cell_type":"code","source":["from matplotlib import pyplot as plt\n","import numpy as np\n","import pandas as pd\n","\n","# Set threshold\n","eval_threshold_vis = evaluation_threshold\n","\n","# Get all topic numbers by extracting from prediction_df columns\n","topic_prob_cols = [col for col in prediction_df.columns if col.startswith(\"Topic_\") and col.endswith(\"_Prob\")]\n","\n","# Collect all rows across all topics\n","combined_points = []\n","\n","for prob_col in topic_prob_cols:\n","    topic_num = prob_col.split(\"_\")[1]\n","    true_col = f\"Topic_{topic_num}\"\n","\n","    true_labels = true_labels_for_eval[true_col].values\n","    predicted_probs = prediction_df[prob_col].values\n","    binary_preds = (predicted_probs >= eval_threshold_vis).astype(int)\n","    pk_values = prediction_df['pk'].values\n","\n","    a = \"#FF9D00\"\n","    b = \"#00A2F3\"\n","    c = \"#4B2362\"\n","    d = \"#CE4763\"\n","\n","\n","    for pk, prob, true, pred in zip(pk_values, predicted_probs, true_labels, binary_preds):\n","        if true == 1 and pred == 1:\n","            outcome = \"TP\"\n","            color = a\n","        elif true == 0 and pred == 0:\n","            outcome = \"TN\"\n","            color = b\n","        elif true == 0 and pred == 1:\n","            outcome = \"FP\"\n","            color = c\n","        elif true == 1 and pred == 0:\n","            outcome = \"FN\"\n","            color = d\n","        else:\n","            continue  # shouldn't happen\n","        combined_points.append((pk, prob, color, outcome))\n","\n","# Create scatterplot\n","fig, ax = plt.subplots(figsize=(14, 7))\n","\n","# Plot each point with correct color\n","for pk, prob, color, _ in combined_points:\n","    ax.scatter(pk, prob, color=color, alpha=0.7)\n","\n","# Add threshold line with label\n","ax.axhline(eval_threshold_vis, color='gray', linestyle='dashed', linewidth=2, label='Threshold')\n","\n","# Custom legend\n","from matplotlib.lines import Line2D\n","legend_elements = [\n","    Line2D([0], [0], marker='o', color='w', label='True Positive', markerfacecolor=a, markersize=10),\n","    Line2D([0], [0], marker='o', color='w', label='True Negative', markerfacecolor=b, markersize=10),\n","    Line2D([0], [0], marker='o', color='w', label='False Positive', markerfacecolor=c, markersize=10),\n","    Line2D([0], [0], marker='o', color='w', label='False Negative', markerfacecolor=d, markersize=10),\n","    Line2D([0], [0], color='gray', linestyle='dashed', linewidth=2, label='Threshold'),\n","]\n","\n","ax.legend(handles=legend_elements, title='Prediction Outcome')\n","\n","\n","# Customize\n","ax.set_title(f'Probability Distribution Across All Topics\\nPrediction Outcomes', fontsize=35)\n","ax.set_xlabel('Document ID', fontsize=20)\n","ax.set_ylabel('Predicted Probability', fontsize=20)\n","ax.set_ylim(0, 1)\n","ax.spines[['top', 'right']].set_visible(False)\n","\n","# Custom legend\n","from matplotlib.lines import Line2D\n","legend_elements = [\n","    Line2D([0], [0], marker='o', color='w', label='True Positive', markerfacecolor=a, markersize=10),\n","    Line2D([0], [0], marker='o', color='w', label='True Negative', markerfacecolor=b, markersize=10),\n","    Line2D([0], [0], marker='o', color='w', label='False Positive', markerfacecolor=c, markersize=10),\n","    Line2D([0], [0], marker='o', color='w', label='False Negative', markerfacecolor=d, markersize=10),\n","]\n","ax.legend(handles=legend_elements, title='Prediction Outcome')\n","\n","plt.style.use('fivethirtyeight')\n","plt.tight_layout()\n","plt.show()\n"],"metadata":{"id":"RbzLt0VPys2R","colab":{"base_uri":"https://localhost:8080/","height":564},"executionInfo":{"status":"ok","timestamp":1754492803535,"user_tz":300,"elapsed":9331,"user":{"displayName":"Uriel Fuentes","userId":"03460244563483632293"}},"outputId":"515d4bed-e8c9-4e73-b1be-5999f21beb50"},"execution_count":40,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1400x700 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]}],"metadata":{"accelerator":"GPU","colab":{"gpuType":"L4","machine_shape":"hm","provenance":[{"file_id":"1MSoA0bAVl-RRFbDiPWiZLgJe7hhjebMo","timestamp":1754080453958}]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"},"widgets":{"application/vnd.jupyter.widget-state+json":{"73cf992c7ed74554a5912d89eea2159e":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_7a5a520d75174a80a63ebe1941fcf2ec","IPY_MODEL_6df866819b2e4b42aec4ac338c36d54b","IPY_MODEL_b9a843adf66a4d5299f74d091176e50a"],"layout":"IPY_MODEL_95206c5f5659477cb7da11ec16540e75"}},"7a5a520d75174a80a63ebe1941fcf2ec":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_ff7d23e3573c43adba8fd62cb86d3068","placeholder":"​","style":"IPY_MODEL_1f39aeee6f5a4c91bc7336e50fa5559e","value":"Map: 100%"}},"6df866819b2e4b42aec4ac338c36d54b":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_29506c43b8874153836118b72c13549f","max":309,"min":0,"orientation":"horizontal","style":"IPY_MODEL_8566aa6d0ab841c891f973e97bd688e8","value":309}},"b9a843adf66a4d5299f74d091176e50a":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_dc79e796be784ab2b9744c374049ffda","placeholder":"​","style":"IPY_MODEL_5ddca62249664a2a9ef5c1da194e4561","value":" 309/309 [00:00&lt;00:00, 717.36 examples/s]"}},"95206c5f5659477cb7da11ec16540e75":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"ff7d23e3573c43adba8fd62cb86d3068":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"1f39aeee6f5a4c91bc7336e50fa5559e":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"29506c43b8874153836118b72c13549f":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"8566aa6d0ab841c891f973e97bd688e8":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"dc79e796be784ab2b9744c374049ffda":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"5ddca62249664a2a9ef5c1da194e4561":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"3c6ffe3ea5154a1fbaf5e2b5732afaeb":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_d4d41b73969b4250a1a5256d29c20c07","IPY_MODEL_ed58a21e17e04e17927b9c3ec3be8443","IPY_MODEL_3008817f065540afbbed5b44d51131f6"],"layout":"IPY_MODEL_15be4ff55ef74b34a4a5494a7f7efb70"}},"d4d41b73969b4250a1a5256d29c20c07":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_7d901b7eda744784966821d362abb16a","placeholder":"​","style":"IPY_MODEL_055487d5ebd0421287f3b205b1e01c36","value":"Map: 100%"}},"ed58a21e17e04e17927b9c3ec3be8443":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_d8898267031543b0a2489c72e0b29468","max":78,"min":0,"orientation":"horizontal","style":"IPY_MODEL_f730f4927da24410bde2ebe94b06aa6a","value":78}},"3008817f065540afbbed5b44d51131f6":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_1125eb8b6050481bb50123000d4ebc9e","placeholder":"​","style":"IPY_MODEL_3ebb2392e92b494a8b254d01fcca2d06","value":" 78/78 [00:00&lt;00:00, 2056.08 examples/s]"}},"15be4ff55ef74b34a4a5494a7f7efb70":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"7d901b7eda744784966821d362abb16a":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"055487d5ebd0421287f3b205b1e01c36":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"d8898267031543b0a2489c72e0b29468":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"f730f4927da24410bde2ebe94b06aa6a":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"1125eb8b6050481bb50123000d4ebc9e":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"3ebb2392e92b494a8b254d01fcca2d06":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"82db5cf041eb458486edafb08d81270c":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_e52e2f2b648c4f2f8b4cb724b90d8b0e","IPY_MODEL_b0cc1acf74904a01a11d02dbd4728d75","IPY_MODEL_52beb72c53ec47be845e7448570f1d84"],"layout":"IPY_MODEL_1f1c0faf41934529a1cf00b382fa91e6"}},"e52e2f2b648c4f2f8b4cb724b90d8b0e":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_04d39d4d3e61447ebeba9b3ec4c432b0","placeholder":"​","style":"IPY_MODEL_2df615fa5e604a188986077b27883034","value":"Map: 100%"}},"b0cc1acf74904a01a11d02dbd4728d75":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_5b1cda77da984a4bba171e2659c1677b","max":170,"min":0,"orientation":"horizontal","style":"IPY_MODEL_2215bb2e3dec42bf9f41364f394ab55c","value":170}},"52beb72c53ec47be845e7448570f1d84":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_e7651200f909404e8e2a3ca36efbe3f6","placeholder":"​","style":"IPY_MODEL_90c1e60ffcde40268639f6009cf2cca8","value":" 170/170 [00:00&lt;00:00, 2510.91 examples/s]"}},"1f1c0faf41934529a1cf00b382fa91e6":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"04d39d4d3e61447ebeba9b3ec4c432b0":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"2df615fa5e604a188986077b27883034":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"5b1cda77da984a4bba171e2659c1677b":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"2215bb2e3dec42bf9f41364f394ab55c":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"e7651200f909404e8e2a3ca36efbe3f6":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"90c1e60ffcde40268639f6009cf2cca8":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"c8f22baed9bf4c18b77c5143620aa442":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_848ad1258b1e41d286eff12fe62c732c","IPY_MODEL_6c8c0479a28d4258b78fa27ea38743d2","IPY_MODEL_7e06593e0a8943bea99fe51f51d894a8"],"layout":"IPY_MODEL_0f9999b3362647f08ebf036ac48d1913"}},"848ad1258b1e41d286eff12fe62c732c":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_2517bb07d0e5452d9bb1b3aed35c84c7","placeholder":"​","style":"IPY_MODEL_fd44c57339d74608be398dd4209d1fd8","value":"Predicting on test data: 100%"}},"6c8c0479a28d4258b78fa27ea38743d2":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_f7aadb7c5c5b4b70a39e5103d143e807","max":43,"min":0,"orientation":"horizontal","style":"IPY_MODEL_8d0e090cd6464f60a316364f3854a24b","value":43}},"7e06593e0a8943bea99fe51f51d894a8":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_0ac7e9b5b949454d910de1e6c5a33b94","placeholder":"​","style":"IPY_MODEL_95ab356384974bdd8ab84a801662c6a0","value":" 43/43 [00:04&lt;00:00, 12.53it/s]"}},"0f9999b3362647f08ebf036ac48d1913":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"2517bb07d0e5452d9bb1b3aed35c84c7":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"fd44c57339d74608be398dd4209d1fd8":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"f7aadb7c5c5b4b70a39e5103d143e807":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"8d0e090cd6464f60a316364f3854a24b":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"0ac7e9b5b949454d910de1e6c5a33b94":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"95ab356384974bdd8ab84a801662c6a0":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}}}}},"nbformat":4,"nbformat_minor":0}